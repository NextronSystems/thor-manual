Module;Explanation
Filescan;Events reported by the **FileScan** module typically originate from the file system scan. But due to the "Message Enrichment" feature, other modules that include events with full "file path" strings may also produce events of this type (e.g. module ``SHIMCache``, ``Eventlog``).
SHIMcache;The **SHIM Cache** or AppCompatCache (Application Compatibility Cache) is a special Registry cache containing valuable information, because the cache tracks metadata for binary files that were executed.
Autoruns;The **Autoruns** module enumerates common locations for programs running automatically at system startup, analyzes them and logs them.
LogScan;The **LogScan** module processes ``*.log`` files found on disk line by line (It performs some checks to avoid scanning files that are not ASCII log files, but something else that uses the ``*.log`` extension). Each log line is checked with all file name and keyword IOCs and scanned with the "keyword" and "log" type YARA rules.
GroupsXML;The **GroupsXML** module is a module that reports on critical security issues related to decryptable passwords in group policy files, that are readable for anyone within a Windows Domain.
Registry;**Registry** matches can be caused by different signature types: File name IOCs, keywords or YARA signatures matches.
WMIPersistence;It is difficult to detect malicious **WMIPersistence** objects. The detection methods are based on whitelists and a blacklist with keywords from APT reports. The whitelists are extended every time our analysts detect false positives in a customer's environment. The black lists are extended every time an APT report states a certain WMI persistence method with specific event filer or event file name.
VulnerabilityCheck;The **VulnerabilityCheck** module is limited to a few vulnerabilities that are known to be exploited by various threat groups. The vulnerability checks focus on vulnerabilities that are used for lateral movement or weaknesses which allow an attacker to easily achieve persistence without using any kind of software as backdoor. Note: There are vulnerabilities covered by YARA rules and reported in other modules. The YARA rules that detect vulnerabilities start with ``VUL_``.
LoggedIn;The **LoggedIn** module analyses all currently logged in users and analyses their names.
ProcessCheck;Different checks are performed in the **ProcessCheck** module. Some of them check the process characteristics such as parent/child relations, process priorities and executable file locations for anomalies. Other checks evaluate the processes network connections and YARA checks match on the process memory.
HotfixCheck;The **HotFixCheck** module analyses the installed hotfixes on the end system.
RunKeyCheck;The **RunKeyCheck** module processes entries in the RUN Key.
AmCache;The **AmCache** module processes entries in the AmCache of the system. In contrast to the SHIMCache entries, AmCache entries contain a SHA1 hash value that can be used to determine the exact program that was executed on the end system.
Firewall;The **Firewall** module evaluates all local Windows firewall rules and tries to detect suspicious entries by using white- and blacklists.
ServiceCheck;The **ServiceCheck** module evaluates all registered local Windows services. It detects suspicious service entries by different anomaly checks, blacklisted keywords and reports file path anomalies.
DNSCache;The **DNSCache** module evaluates the entries of the local DNS cache. It compares the entries with known C2 servers and reports suspicious entries based on some regular expression checks.
Hosts;The **Hosts** module evaluates the entries in the local hosts file.
WMIStartup;The **WMIStartup** module uses different WMI queries to retrieve information on elements that could be used for persistence. It is very likely that findings by this module also appear in other modules (e.g. ``Autoruns``) in a different form, because it just uses a different method to look at the same elements.
CommandCheck;The **CommandCheck** module is a meta module that analyses full command lines (path, executable, parameters) in different modules.
ProcessHandles;The **ProcessHandles** module is a sub module of the ``ProcessCheck`` module that analyses the handles of each process. The module makes use of the SysInternals ``handle.exe`` tool that can be placed in the ``./tools`` sub folder.
ProcessConnection;The **ProcessConnections** module checks the network connections of a process and generates alerts and warnings based on C2 signature matches and suspicious GEO IP lookups.
WER;The **WER** (Windows Error Reporting) module analyses program crash files and checks for special crashes caused by exploits and filename IOC signature matches in the application path. Software can break, so applications tend to crash, hack tools and exploits crash as well. Even if the attackers completely removed their tools from a system, a crashed exploit code, scanner, password dumper or backdoor will still be visible in the Windows Error Reports.
UserAccounts;The **UserAccounts** module analyses the local user database. It checks for suspicious user names, suspicious members in the ``Administrators`` group, activated guest accounts, user accounts created on Sundays and reports recently logged in users. It applies the ``hot time frame`` parameter (``-f``) if given and reports suspicious account activity on a given set of dates.
AtJobs;The **AtJobs** module analyses the local user jobs and just lists them in "Info" level messages and applies the global string check on the command line.
ScheduledTasks;The **ScheduledTasks** module analyses the local user at jobs and just lists them in "Info" level messages and applies the global string check on the command line.
Rescontrol;The **Rescontrol** (Resource Control) module generates "Warning" level messages in cases a resource limit has been reached. In most of the cases, this is caused by very low free main memory levels or false positives that generated many SYSLOG messages. Resource control is active by default and can be deactivated with (``--norescontrol``).
DeepDive;A **DeepDive** on memory images or disk space cannot be analyzed by THOR events alone. You typically need the memory dumps or restored chunks to evaluate the findings. This typically takes a lot more time, know-how and effort to complete.We recommend the analysis of DeepDive module events only in case other indicators give a sufficient initial suspicion.
Rootkit;The **Rootkit** module checks for various (OS dependent) rootkit indicators, e.g. DoublePulsar on Windows, or Drovorub on Linux.
Antivirus;The **Antivirus** module lists the installed Antivirus products and (for Windows Defender) the existing exclusions.